apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply from: "$project.rootDir/tools/script-git-version.gradle"
apply from: "$project.rootDir/tools/script-findbugs.gradle"
apply from: "$project.rootDir/tools/script-lint.gradle"
apply from: "$project.rootDir/tools/script-pmd.gradle"

def keyProperties = new Properties()
try {
    def propsFile = rootProject.file('keystore/keystore.properties')
    keyProperties.load(new FileInputStream(propsFile))
} catch (ignored) {
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"

    defaultConfig {
        applicationId "br.com.mxel.cuedot"
        minSdkVersion 16
        targetSdkVersion 26
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "THE_MOVIE_DB_API_KEY", rootProject.ext.apiKey
        buildConfigField "String", "THE_MOVIE_DB_API_URL", rootProject.ext.apiUrl
        buildConfigField "String", "THE_MOVIE_DB_API_VERSION", rootProject.ext.apiVersion
    }

    signingConfigs {
        debug {
            keyAlias 'android_debug_key'
            keyPassword 'android'
            storePassword 'android'
            storeFile rootProject.file('keystore/debug.keystore.jks')
        }
        release {
            keyAlias keyProperties['keyAlias']
            keyPassword keyProperties['keyPassword']
            storePassword keyProperties['storePassword']
            storeFile file(keyProperties['storeFile'])
        }
    }

    productFlavors {
        dev {
            signingConfig signingConfigs.debug
            versionCode gitVersionCodeTime
            versionName gitVersionName
            applicationId "br.com.mxel.cuedot.dev"
        }
        prod {
            signingConfig signingConfigs.release
            versionCode gitVersionCode
            versionName gitVersionName
            applicationId "br.com.mxel.cuedot"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$project.rootDir/tools/proguard-rules.pro"
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }

    /* allow using java 8 lambda */
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}
// Generated code is incompatible with Retrolambda
/*retrolambda {
    jvmArgs '-noverify'
}*/

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':cuedot-core')

    androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile "junit:junit:$junitVersion"

    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support.constraint:constraint-layout:$supportConstraintVersion"

    // Network API
    compile "com.squareup.okhttp3:okhttp:$okhttpVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    // RX
    compile "io.reactivex.rxjava2:rxjava:$rxjavaVersion"
    compile "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"

    // Dependency injection
    apt "com.google.dagger:dagger-compiler:$daggerVersion"
    compile "com.google.dagger:dagger:$daggerVersion"
}
repositories {
    mavenCentral()
}
