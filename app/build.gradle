apply plugin: 'com.android.application'
apply from: "$project.rootDir/tools/script-git-version.gradle"
apply from: "$project.rootDir/tools/script-findbugs.gradle"
apply from: "$project.rootDir/tools/script-lint.gradle"
apply from: "$project.rootDir/tools/script-pmd.gradle"

def keyProperties = new Properties()
try {
    def propsFile = rootProject.file('keystore/keystore.properties')
    keyProperties.load(new FileInputStream(propsFile))
} catch (ignored) {
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    flavorDimensions "default"

    defaultConfig {
        applicationId "br.com.mxel.cuedot"
        minSdkVersion 21
        targetSdkVersion 27
        versionName gitVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "THE_MOVIE_DB_API_KEY", rootProject.ext.apiKey
        buildConfigField "String", "THE_MOVIE_DB_API_URL", rootProject.ext.apiUrl
        buildConfigField "String", "THE_MOVIE_DB_API_VERSION", rootProject.ext.apiVersion
    }

    signingConfigs {
        debug {
            keyAlias 'android_debug_key'
            keyPassword 'android'
            storePassword 'android'
            storeFile rootProject.file('keystore/debug.keystore.jks')
        }
        release {
            keyAlias keyProperties['keyAlias']
            keyPassword keyProperties['keyPassword']
            storePassword keyProperties['storePassword']
            storeFile file(keyProperties['storeFile'])
        }
    }

    productFlavors {
        dev {
            signingConfig signingConfigs.debug
            versionCode gitVersionCodeTime
            applicationIdSuffix ".dev"
            dimension "default"
        }
        prod {
            signingConfig signingConfigs.release
            versionCode gitVersionCode
            dimension "default"
        }
    }

    // Remove devRelease as it's not needed.
    android.variantFilter { variant ->
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('dev')) {
            variant.setIgnore(true);
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$project.rootDir/tools/proguard-rules.pro"
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }

    /* allow using java 8 lambda */
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':cuedot-core')

    // Test
    androidTestImplementation(rootProject.ext.testLibraries.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation rootProject.ext.testLibraries.junit

    // Android
    implementation rootProject.ext.libraries.appcompat
    implementation rootProject.ext.libraries.recyclerView
    implementation rootProject.ext.libraries.cardView
    implementation rootProject.ext.libraries.picasso
    implementation rootProject.ext.libraries.timber

    // View Injection
    implementation rootProject.ext.libraries.butterknife
    annotationProcessor rootProject.ext.libraries.butterknifeCompiler

    // Dependency injection
    implementation rootProject.ext.libraries.dagger
    annotationProcessor rootProject.ext.libraries.daggerCompiler

    // RX
    implementation rootProject.ext.libraries.rxAndroid

    // Database
    implementation rootProject.ext.libraries.ormLiteCore
    implementation rootProject.ext.libraries.ormLite

}
repositories {
    mavenCentral()
    google()
}
